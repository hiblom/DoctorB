#include "stdafx.h"
#include "Evaluator.h"
#include "Constants.h"

using namespace std;

Evaluator::Evaluator(const Position& position) : position_(position) {
}

Evaluator::~Evaluator() {
}

int Evaluator::CompareScore(uint8_t color, Score score_1, Score score_2) {
	if (score_1.GetValue() == score_2.GetValue())
		return 0;

	return ((color == Piece::COLOR_WHITE) == (score_1.GetValue() > score_2.GetValue())) ? 1 : -1;
}

void Evaluator::Evaluate(Score& score) {
	int64_t value = 0;
	for (uint8_t p = 0; p < 12; p++) {
		BitBoard piece_board = position_.GetBitBoard(Piece(p));
		Square square;
		while (piece_board.PopLowestSquare(square)) {
			value += Constants::PIECE_VALUES[p] + PIECE_SQUARE_VALUE[p][square.GetValue()];
		}
		//value += position_.GetBitBoard(Piece(p)).PopCount() * Constants::PIECE_VALUES[p];
	}

	//add random "noise" to prevent DoctorB from playing the same moves over and over
	//noise band = 0..4
	value += (rand() % 5);
	return score.SetValue(value);
}

const int Evaluator::PIECE_SQUARE_VALUE[12][64] = {
	{//black pawn
	  0,  0,  0,  0,  0,  0,  0,  0,
	-50,-50,-50,-50,-50,-50,-50,-50,
	-10,-25,-25,-25,-25,-25,-25,-10,
	  0,  0,-25,-25,-25,-25,  0,  0,
	  0,  0,  0,-25,-25,  0,  0,  0,
	  0,  0,  0,  0,  0,  0,  0,  0,
	 -5,-10,-10, 25, 25,-10,-10, -5,
	  0,  0,  0,  0,  0,  0,  0,  0
	},
	{//white pawn
	  0,  0,  0,  0,  0,  0,  0,  0,
	  5, 10, 10,-25,-25, 10, 10,  5,
	  0,  0,  0,  0,  0,  0,  0,  0,
	  0,  0,  0, 25, 25,  0,  0,  0,
	  0,  0, 25, 25, 25, 25,  0,  0,
	 10, 25, 25, 25, 25, 25, 25, 10,
	 50, 50, 50, 50, 50, 50, 50, 50,
	  0,  0,  0,  0,  0,  0,  0,  0
	},
	{//black knight
	 50, 25, 25, 25, 25, 25, 25, 50,
	 25,  0,  0,  0,  0,  0,  0, 25,
	 25,  0,-20,-20,-20,-20,  0, 25,
	 25,  0,-20,-20,-20,-20,  0, 25,
	 25,  0,-20,-20,-20,-20,  0, 25,
	 25,  0,-20,-20,-20,-20,  0, 25,
	 25,  0,  0,  0,  0,  0,  0, 25,
	 50, 25, 25, 25, 25, 25, 25, 50
	},
	{//white knight
	-50,-25,-25,-25,-25,-25,-25,-50,
	-25,  0,  0,  0,  0,  0,  0,-25,
	-25,  0, 20, 20, 20, 20,  0,-25,
	-25,  0, 20, 20, 20, 20,  0,-25,
	-25,  0, 20, 20, 20, 20,  0,-25,
	-25,  0, 20, 20, 20, 20,  0,-25,
	-25,  0,  0,  0,  0,  0,  0,-25,
	-50,-25,-25,-25,-25,-25,-25,-50
	},
	{//black bishop
	 50, 25, 25,  0,  0, 25, 25, 50,
	 25,-10,  0,  0,  0,  0,-10, 25,
	 25,  0,-10,  0,  0,-10,  0, 25,
	 25,  0,  0,-25,-25,  0,  0, 25,
	 25,  0,  0,-25,-25,  0,  0, 25,
	 25,  0,-10,  0,  0,-10,  0, 25,
	 25,-10,  0,  0,  0,  0,-10, 25,
	 50, 25, 25,  0,  0, 25, 25, 50
	},
	{//white bishop
	-50,-25,-25,  0,  0,-25,-25,-50,
	-25, 10,  0,  0,  0,  0, 10,-25,
	-25,  0, 25,  0,  0, 25,  0,-25,
	-25,  0,  0, 25, 25,  0,  0,-25,
	-25,  0,  0, 25, 25,  0,  0,-25,
	-25,  0, 25,  0,  0, 25,  0,-25,
	-25, 10,  0,  0,  0,  0, 10,-25,
	-50,-25,-25,  0,  0,-25,-25,-50
	},
	{//black rook
	  0,  0,  0,  0,  0,  0,  0,  0,
	 25,  0,  0,  0,  0,  0,  0, 25,
	 25,  0,  0,  0,  0,  0,  0, 25,
	 25,  0,  0,  0,  0,  0,  0, 25,
	 25,  0,  0,  0,  0,  0,  0, 25,
	 25,  0,  0,  0,  0,  0,  0, 25,
	 25,  0,  0,  0,  0,  0,  0, 25,
	 25,  0,  0,-10,-10,-10,  0, 25
	},
	{//white rook
	-25,  0,  0, 10, 10, 10,  0,-25,
	-25,  0,  0,  0,  0,  0,  0,-25,
	-25,  0,  0,  0,  0,  0,  0,-25,
	-25,  0,  0,  0,  0,  0,  0,-25,
	-25,  0,  0,  0,  0,  0,  0,-25,
	-25,  0,  0,  0,  0,  0,  0,-25,
	-25,  0,  0,  0,  0,  0,  0,-25,
		0,  0,  0,  0,  0,  0,  0,  0
	},
	{//black queen
	 50, 25, 25,  0,  0, 25, 25, 50,
	 25,  0,  0,  0,  0,  0,  0, 25,
	 25,  0,  0,  0,  0,  0,  0, 25,
	 25,  0,  0,  0,  0,  0,  0, 25,
	 25,  0,  0,  0,  0,  0,  0, 25,
	 25,  0,  0,  0,  0,  0,  0, 25,
	 25,  0,  0,  0,  0,  0,  0, 25,
	 50, 25, 25,  0,  0, 25, 25, 50
	},
	{//white queen
	-50,-25,-25,  0,  0,-25,-25,-50,
	-25,  0,  0,  0,  0,  0,  0,-25,
	-25,  0,  0,  0,  0,  0,  0,-25,
	-25,  0,  0,  0,  0,  0,  0,-25,
	-25,  0,  0,  0,  0,  0,  0,-25,
	-25,  0,  0,  0,  0,  0,  0,-25,
	-25,  0,  0,  0,  0,  0,  0,-25,
	-50,-25,-25,  0,  0,-25,-25,-50
	},
	{//black king
	 50, 50, 50, 50, 50, 50, 50, 50,
	 50, 50, 50, 50, 50, 50, 50, 50,
	 50, 50, 50, 50, 50, 50, 50, 50,
	 50, 50, 50, 50, 50, 50, 50, 50,
	 50, 50, 50, 50, 50, 50, 50, 50,
	 50, 50, 50, 50, 50, 50, 50, 50,
	 10, 10, 25, 25, 25, 25, 10, 10,
	-10,-25,  0,  0,  0,-10,-25,-10
	},
	{ //white king
	 10, 25, 10,  0,  0,  0, 25, 10,
	-10,-10,-25,-25,-25,-25,-10,-10,
	-50,-50,-50,-50,-50,-50,-50,-50,
	-50,-50,-50,-50,-50,-50,-50,-50,
	-50,-50,-50,-50,-50,-50,-50,-50,
	-50,-50,-50,-50,-50,-50,-50,-50,
	-50,-50,-50,-50,-50,-50,-50,-50,
	-50,-50,-50,-50,-50,-50,-50,-50
	}
};